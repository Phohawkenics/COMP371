// Ensure 64/32-bit memory compatability with the dump contents
assert( sizeof( int* ) == 4 );
scene.SetGravity( q3Vec3( 0.000000000000000, -9.800000190734863, 0.000000000000000 ) );
scene.SetAllowSleep( true );
scene.SetEnableFriction( true );
q3Body** bodies = (q3Body**)q3Alloc( sizeof( q3Body* ) * 138 );
{
	q3BodyDef bd;
	bd.bodyType = q3BodyType( 1 );
	bd.position.Set( r32( 0.957778036594391 ), r32( 2.078472375869751 ), r32( 1.895081639289856 ) );
	bd.axis.Set( r32( 0.783430576324463 ), r32( 0.620631575584412 ), r32( 0.032453093677759 ) );
	bd.angle = r32( 2.871601819992065 );
	bd.linearVelocity.Set( r32( 1.249275207519531 ), r32( -4.876993179321289 ), r32( 2.471846580505371 ) );
	bd.angularVelocity.Set( r32( 2.121205091476440 ), r32( 0.983473539352417 ), r32( 2.253782987594605 ) );
	bd.gravityScale = r32( 1.000000000000000 );
	bd.layers = 1;
	bd.allowSleep = bool( 4 );
	bd.awake = bool( 1 );
	bd.awake = bool( 1 );
	bd.lockAxisX = bool( 0 );
	bd.lockAxisY = bool( 0 );
	bd.lockAxisZ = bool( 0 );
	bodies[ 0 ] = scene.CreateBody( bd );

	{
		q3BoxDef sd;
		sd.SetFriction( r32( 0.400000005960464 ) );
		sd.SetRestitution( r32( 0.200000002980232 ) );
		sd.SetDensity( r32( 1.000000000000000 ) );
		sd.SetSensor( bool( 0 ) );
		q3Transform boxTx;
		q3Vec3 xAxis( r32( 1.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
		q3Vec3 yAxis( r32( 0.000000000000000 ), r32( 1.000000000000000 ), r32( 0.000000000000000 ) );
		q3Vec3 zAxis( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 1.000000000000000 ) );
		boxTx.rotation.SetRows( xAxis, yAxis, zAxis );
		boxTx.position.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
		sd.Set( boxTx, q3Vec3( r32( 1.000000000000000 ), r32( 1.000000000000000 ), r32( 1.000000000000000 ) ) );
		bodies[ 0 ]->AddBox( sd );
	}
}

{
	q3BodyDef bd;
	bd.bodyType = q3BodyType( 1 );
	bd.position.Set( r32( 0.270541787147522 ), r32( 0.992997288703918 ), r32( -0.974205791950226 ) );
	bd.axis.Set( r32( 0.975428640842438 ), r32( 0.002229973906651 ), r32( 0.220304563641548 ) );
	bd.angle = r32( 3.147412776947022 );
	bd.linearVelocity.Set( r32( 0.000000002561137 ), r32( 0.000000000000000 ), r32( 0.000000004540198 ) );
	bd.angularVelocity.Set( r32( 0.000000008367461 ), r32( -0.000000000211781 ), r32( -0.000000005199452 ) );
	bd.gravityScale = r32( 1.000000000000000 );
	bd.layers = 1;
	bd.allowSleep = bool( 4 );
	bd.awake = bool( 1 );
	bd.awake = bool( 1 );
	bd.lockAxisX = bool( 0 );
	bd.lockAxisY = bool( 0 );
	bd.lockAxisZ = bool( 0 );
	bodies[ 1 ] = scene.CreateBody( bd );

	{
		q3BoxDef sd;
		sd.SetFriction( r32( 0.400000005960464 ) );
		sd.SetRestitution( r32( 0.200000002980232 ) );
		sd.SetDensity( r32( 1.000000000000000 ) );
		sd.SetSensor( bool( 0 ) );
		q3Transform boxTx;
		q3Vec3 xAxis( r32( 1.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
		q3Vec3 yAxis( r32( 0.000000000000000 ), r32( 1.000000000000000 ), r32( 0.000000000000000 ) );
		q3Vec3 zAxis( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 1.000000000000000 ) );
		boxTx.rotation.SetRows( xAxis, yAxis, zAxis );
		boxTx.position.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
		sd.Set( boxTx, q3Vec3( r32( 1.000000000000000 ), r32( 1.000000000000000 ), r32( 1.000000000000000 ) ) );
		bodies[ 1 ]->AddBox( sd );
	}
}

{
	q3BodyDef bd;
	bd.bodyType = q3BodyType( 1 );
	bd.position.Set( r32( -1.752046585083008 ), r32( 0.981405079364777 ), r32( -1.200585365295410 ) );
	bd.axis.Set( r32( 0.999714195728302 ), r32( 0.019330115988851 ), r32( 0.014069899916649 ) );
	bd.angle = r32( 3.147760629653931 );
	bd.linearVelocity.Set( r32( 0.000000004540198 ), r32( -0.000000009546056 ), r32( -0.000000004540198 ) );
	bd.angularVelocity.Set( r32( -0.000000010064926 ), r32( -0.000000000095926 ), r32( -0.000000009316939 ) );
	bd.gravityScale = r32( 1.000000000000000 );
	bd.layers = 1;
	bd.allowSleep = bool( 4 );
	bd.awake = bool( 1 );
	bd.awake = bool( 1 );
	bd.lockAxisX = bool( 0 );
	bd.lockAxisY = bool( 0 );
	bd.lockAxisZ = bool( 0 );
	bodies[ 2 ] = scene.CreateBody( bd );

	{
		q3BoxDef sd;
		sd.SetFriction( r32( 0.400000005960464 ) );
		sd.SetRestitution( r32( 0.200000002980232 ) );
		sd.SetDensity( r32( 1.000000000000000 ) );
		sd.SetSensor( bool( 0 ) );
		q3Transform boxTx;
		q3Vec3 xAxis( r32( 1.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
		q3Vec3 yAxis( r32( 0.000000000000000 ), r32( 1.000000000000000 ), r32( 0.000000000000000 ) );
		q3Vec3 zAxis( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 1.000000000000000 ) );
		boxTx.rotation.SetRows( xAxis, yAxis, zAxis );
		boxTx.position.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
		sd.Set( boxTx, q3Vec3( r32( 1.000000000000000 ), r32( 1.000000000000000 ), r32( 1.000000000000000 ) ) );
		bodies[ 2 ]->AddBox( sd );
	}
}

{
	q3BodyDef bd;
	bd.bodyType = q3BodyType( 1 );
	bd.position.Set( r32( -2.975235462188721 ), r32( 0.995135366916656 ), r32( -4.863773822784424 ) );
	bd.axis.Set( r32( 0.076314099133015 ), r32( -0.706278502941132 ), r32( -0.703808724880219 ) );
	bd.angle = r32( 3.298063755035400 );
	bd.linearVelocity.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
	bd.angularVelocity.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
	bd.gravityScale = r32( 1.000000000000000 );
	bd.layers = 1;
	bd.allowSleep = bool( 4 );
	bd.awake = bool( 0 );
	bd.awake = bool( 0 );
	bd.lockAxisX = bool( 0 );
	bd.lockAxisY = bool( 0 );
	bd.lockAxisZ = bool( 0 );
	bodies[ 3 ] = scene.CreateBody( bd );

	{
		q3BoxDef sd;
		sd.SetFriction( r32( 0.400000005960464 ) );
		sd.SetRestitution( r32( 0.200000002980232 ) );
		sd.SetDensity( r32( 1.000000000000000 ) );
		sd.SetSensor( bool( 0 ) );
		q3Transform boxTx;
		q3Vec3 xAxis( r32( 1.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
		q3Vec3 yAxis( r32( 0.000000000000000 ), r32( 1.000000000000000 ), r32( 0.000000000000000 ) );
		q3Vec3 zAxis( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 1.000000000000000 ) );
		boxTx.rotation.SetRows( xAxis, yAxis, zAxis );
		boxTx.position.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
		sd.Set( boxTx, q3Vec3( r32( 1.000000000000000 ), r32( 1.000000000000000 ), r32( 1.000000000000000 ) ) );
		bodies[ 3 ]->AddBox( sd );
	}
}

{
	q3BodyDef bd;
	bd.bodyType = q3BodyType( 1 );
	bd.position.Set( r32( 2.635011434555054 ), r32( 0.991615772247314 ), r32( -3.284735441207886 ) );
	bd.axis.Set( r32( 0.565638720989227 ), r32( 0.004589683376253 ), r32( 0.824640512466431 ) );
	bd.angle = r32( 3.141356229782105 );
	bd.linearVelocity.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
	bd.angularVelocity.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
	bd.gravityScale = r32( 1.000000000000000 );
	bd.layers = 1;
	bd.allowSleep = bool( 4 );
	bd.awake = bool( 0 );
	bd.awake = bool( 0 );
	bd.lockAxisX = bool( 0 );
	bd.lockAxisY = bool( 0 );
	bd.lockAxisZ = bool( 0 );
	bodies[ 4 ] = scene.CreateBody( bd );

	{
		q3BoxDef sd;
		sd.SetFriction( r32( 0.400000005960464 ) );
		sd.SetRestitution( r32( 0.200000002980232 ) );
		sd.SetDensity( r32( 1.000000000000000 ) );
		sd.SetSensor( bool( 0 ) );
		q3Transform boxTx;
		q3Vec3 xAxis( r32( 1.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
		q3Vec3 yAxis( r32( 0.000000000000000 ), r32( 1.000000000000000 ), r32( 0.000000000000000 ) );
		q3Vec3 zAxis( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 1.000000000000000 ) );
		boxTx.rotation.SetRows( xAxis, yAxis, zAxis );
		boxTx.position.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
		sd.Set( boxTx, q3Vec3( r32( 1.000000000000000 ), r32( 1.000000000000000 ), r32( 1.000000000000000 ) ) );
		bodies[ 4 ]->AddBox( sd );
	}
}

{
	q3BodyDef bd;
	bd.bodyType = q3BodyType( 1 );
	bd.position.Set( r32( -7.130634307861328 ), r32( 0.996543049812317 ), r32( -1.563460230827332 ) );
	bd.axis.Set( r32( 0.671617567539215 ), r32( 0.524149477481842 ), r32( 0.523638367652893 ) );
	bd.angle = r32( 4.320754051208496 );
	bd.linearVelocity.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
	bd.angularVelocity.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
	bd.gravityScale = r32( 1.000000000000000 );
	bd.layers = 1;
	bd.allowSleep = bool( 4 );
	bd.awake = bool( 0 );
	bd.awake = bool( 0 );
	bd.lockAxisX = bool( 0 );
	bd.lockAxisY = bool( 0 );
	bd.lockAxisZ = bool( 0 );
	bodies[ 5 ] = scene.CreateBody( bd );

	{
		q3BoxDef sd;
		sd.SetFriction( r32( 0.400000005960464 ) );
		sd.SetRestitution( r32( 0.200000002980232 ) );
		sd.SetDensity( r32( 1.000000000000000 ) );
		sd.SetSensor( bool( 0 ) );
		q3Transform boxTx;
		q3Vec3 xAxis( r32( 1.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
		q3Vec3 yAxis( r32( 0.000000000000000 ), r32( 1.000000000000000 ), r32( 0.000000000000000 ) );
		q3Vec3 zAxis( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 1.000000000000000 ) );
		boxTx.rotation.SetRows( xAxis, yAxis, zAxis );
		boxTx.position.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
		sd.Set( boxTx, q3Vec3( r32( 1.000000000000000 ), r32( 1.000000000000000 ), r32( 1.000000000000000 ) ) );
		bodies[ 5 ]->AddBox( sd );
	}
}

{
	q3BodyDef bd;
	bd.bodyType = q3BodyType( 1 );
	bd.position.Set( r32( -11.468207359313965 ), r32( 0.995664060115814 ), r32( -4.446636199951172 ) );
	bd.axis.Set( r32( 0.003295979928225 ), r32( 0.999993681907654 ), r32( 0.001405441318639 ) );
	bd.angle = r32( 1.763471841812134 );
	bd.linearVelocity.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
	bd.angularVelocity.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
	bd.gravityScale = r32( 1.000000000000000 );
	bd.layers = 1;
	bd.allowSleep = bool( 4 );
	bd.awake = bool( 0 );
	bd.awake = bool( 0 );
	bd.lockAxisX = bool( 0 );
	bd.lockAxisY = bool( 0 );
	bd.lockAxisZ = bool( 0 );
	bodies[ 6 ] = scene.CreateBody( bd );

	{
		q3BoxDef sd;
		sd.SetFriction( r32( 0.400000005960464 ) );
		sd.SetRestitution( r32( 0.200000002980232 ) );
		sd.SetDensity( r32( 1.000000000000000 ) );
		sd.SetSensor( bool( 0 ) );
		q3Transform boxTx;
		q3Vec3 xAxis( r32( 1.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
		q3Vec3 yAxis( r32( 0.000000000000000 ), r32( 1.000000000000000 ), r32( 0.000000000000000 ) );
		q3Vec3 zAxis( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 1.000000000000000 ) );
		boxTx.rotation.SetRows( xAxis, yAxis, zAxis );
		boxTx.position.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
		sd.Set( boxTx, q3Vec3( r32( 1.000000000000000 ), r32( 1.000000000000000 ), r32( 1.000000000000000 ) ) );
		bodies[ 6 ]->AddBox( sd );
	}
}

{
	q3BodyDef bd;
	bd.bodyType = q3BodyType( 1 );
	bd.position.Set( r32( -4.034737586975098 ), r32( 0.997999012470245 ), r32( -4.179325103759766 ) );
	bd.axis.Set( r32( -0.527467787265778 ), r32( 0.600031495094299 ), r32( 0.601448237895966 ) );
	bd.angle = r32( 2.169556379318237 );
	bd.linearVelocity.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
	bd.angularVelocity.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
	bd.gravityScale = r32( 1.000000000000000 );
	bd.layers = 1;
	bd.allowSleep = bool( 4 );
	bd.awake = bool( 0 );
	bd.awake = bool( 0 );
	bd.lockAxisX = bool( 0 );
	bd.lockAxisY = bool( 0 );
	bd.lockAxisZ = bool( 0 );
	bodies[ 7 ] = scene.CreateBody( bd );

	{
		q3BoxDef sd;
		sd.SetFriction( r32( 0.400000005960464 ) );
		sd.SetRestitution( r32( 0.200000002980232 ) );
		sd.SetDensity( r32( 1.000000000000000 ) );
		sd.SetSensor( bool( 0 ) );
		q3Transform boxTx;
		q3Vec3 xAxis( r32( 1.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
		q3Vec3 yAxis( r32( 0.000000000000000 ), r32( 1.000000000000000 ), r32( 0.000000000000000 ) );
		q3Vec3 zAxis( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 1.000000000000000 ) );
		boxTx.rotation.SetRows( xAxis, yAxis, zAxis );
		boxTx.position.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
		sd.Set( boxTx, q3Vec3( r32( 1.000000000000000 ), r32( 1.000000000000000 ), r32( 1.000000000000000 ) ) );
		bodies[ 7 ]->AddBox( sd );
	}
}

{
	q3BodyDef bd;
	bd.bodyType = q3BodyType( 1 );
	bd.position.Set( r32( -4.483248710632324 ), r32( 0.999261677265167 ), r32( -2.076803445816040 ) );
	bd.axis.Set( r32( 0.149082690477371 ), r32( -0.149248510599136 ), r32( -0.977496385574341 ) );
	bd.angle = r32( 1.592585802078247 );
	bd.linearVelocity.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
	bd.angularVelocity.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
	bd.gravityScale = r32( 1.000000000000000 );
	bd.layers = 1;
	bd.allowSleep = bool( 4 );
	bd.awake = bool( 0 );
	bd.awake = bool( 0 );
	bd.lockAxisX = bool( 0 );
	bd.lockAxisY = bool( 0 );
	bd.lockAxisZ = bool( 0 );
	bodies[ 8 ] = scene.CreateBody( bd );

	{
		q3BoxDef sd;
		sd.SetFriction( r32( 0.400000005960464 ) );
		sd.SetRestitution( r32( 0.200000002980232 ) );
		sd.SetDensity( r32( 1.000000000000000 ) );
		sd.SetSensor( bool( 0 ) );
		q3Transform boxTx;
		q3Vec3 xAxis( r32( 1.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
		q3Vec3 yAxis( r32( 0.000000000000000 ), r32( 1.000000000000000 ), r32( 0.000000000000000 ) );
		q3Vec3 zAxis( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 1.000000000000000 ) );
		boxTx.rotation.SetRows( xAxis, yAxis, zAxis );
		boxTx.position.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
		sd.Set( boxTx, q3Vec3( r32( 1.000000000000000 ), r32( 1.000000000000000 ), r32( 1.000000000000000 ) ) );
		bodies[ 8 ]->AddBox( sd );
	}
}

{
	q3BodyDef bd;
	bd.bodyType = q3BodyType( 1 );
	bd.position.Set( r32( 0.514139711856842 ), r32( 0.990920782089233 ), r32( 1.657704472541809 ) );
	bd.axis.Set( r32( 0.560413777828217 ), r32( 0.589695990085602 ), r32( -0.581545531749725 ) );
	bd.angle = r32( 2.110032796859741 );
	bd.linearVelocity.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
	bd.angularVelocity.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
	bd.gravityScale = r32( 1.000000000000000 );
	bd.layers = 1;
	bd.allowSleep = bool( 4 );
	bd.awake = bool( 0 );
	bd.awake = bool( 0 );
	bd.lockAxisX = bool( 0 );
	bd.lockAxisY = bool( 0 );
	bd.lockAxisZ = bool( 0 );
	bodies[ 9 ] = scene.CreateBody( bd );

	{
		q3BoxDef sd;
		sd.SetFriction( r32( 0.400000005960464 ) );
		sd.SetRestitution( r32( 0.200000002980232 ) );
		sd.SetDensity( r32( 1.000000000000000 ) );
		sd.SetSensor( bool( 0 ) );
		q3Transform boxTx;
		q3Vec3 xAxis( r32( 1.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
		q3Vec3 yAxis( r32( 0.000000000000000 ), r32( 1.000000000000000 ), r32( 0.000000000000000 ) );
		q3Vec3 zAxis( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 1.000000000000000 ) );
		boxTx.rotation.SetRows( xAxis, yAxis, zAxis );
		boxTx.position.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
		sd.Set( boxTx, q3Vec3( r32( 1.000000000000000 ), r32( 1.000000000000000 ), r32( 1.000000000000000 ) ) );
		bodies[ 9 ]->AddBox( sd );
	}
}

{
	q3BodyDef bd;
	bd.bodyType = q3BodyType( 1 );
	bd.position.Set( r32( -1.622804403305054 ), r32( 0.998688817024231 ), r32( -5.487593650817871 ) );
	bd.axis.Set( r32( 0.490929752588272 ), r32( -0.615889012813568 ), r32( 0.616172730922699 ) );
	bd.angle = r32( 2.231158018112183 );
	bd.linearVelocity.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
	bd.angularVelocity.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
	bd.gravityScale = r32( 1.000000000000000 );
	bd.layers = 1;
	bd.allowSleep = bool( 4 );
	bd.awake = bool( 0 );
	bd.awake = bool( 0 );
	bd.lockAxisX = bool( 0 );
	bd.lockAxisY = bool( 0 );
	bd.lockAxisZ = bool( 0 );
	bodies[ 10 ] = scene.CreateBody( bd );

	{
		q3BoxDef sd;
		sd.SetFriction( r32( 0.400000005960464 ) );
		sd.SetRestitution( r32( 0.200000002980232 ) );
		sd.SetDensity( r32( 1.000000000000000 ) );
		sd.SetSensor( bool( 0 ) );
		q3Transform boxTx;
		q3Vec3 xAxis( r32( 1.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
		q3Vec3 yAxis( r32( 0.000000000000000 ), r32( 1.000000000000000 ), r32( 0.000000000000000 ) );
		q3Vec3 zAxis( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 1.000000000000000 ) );
		boxTx.rotation.SetRows( xAxis, yAxis, zAxis );
		boxTx.position.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
		sd.Set( boxTx, q3Vec3( r32( 1.000000000000000 ), r32( 1.000000000000000 ), r32( 1.000000000000000 ) ) );
		bodies[ 10 ]->AddBox( sd );
	}
}

{
	q3BodyDef bd;
	bd.bodyType = q3BodyType( 0 );
	bd.position.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
	bd.axis.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
	bd.angle = r32( 0.000000000000000 );
	bd.linearVelocity.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
	bd.angularVelocity.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
	bd.gravityScale = r32( 1.000000000000000 );
	bd.layers = 1;
	bd.allowSleep = bool( 4 );
	bd.awake = bool( 1 );
	bd.awake = bool( 1 );
	bd.lockAxisX = bool( 0 );
	bd.lockAxisY = bool( 0 );
	bd.lockAxisZ = bool( 0 );
	bodies[ 11 ] = scene.CreateBody( bd );

	{
		q3BoxDef sd;
		sd.SetFriction( r32( 0.400000005960464 ) );
		sd.SetRestitution( r32( 0.000000000000000 ) );
		sd.SetDensity( r32( 1.000000000000000 ) );
		sd.SetSensor( bool( 0 ) );
		q3Transform boxTx;
		q3Vec3 xAxis( r32( 1.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
		q3Vec3 yAxis( r32( 0.000000000000000 ), r32( 1.000000000000000 ), r32( 0.000000000000000 ) );
		q3Vec3 zAxis( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 1.000000000000000 ) );
		boxTx.rotation.SetRows( xAxis, yAxis, zAxis );
		boxTx.position.Set( r32( 0.000000000000000 ), r32( 0.000000000000000 ), r32( 0.000000000000000 ) );
		sd.Set( boxTx, q3Vec3( r32( 50.000000000000000 ), r32( 1.000000000000000 ), r32( 50.000000000000000 ) ) );
		bodies[ 11 ]->AddBox( sd );
	}
}

q3Free( bodies );
