#version 330 core


// Light and Material Uniform Variables
uniform float materialAmbient; // Ambient Term
uniform float materialDiffuse; // Diffuse Term
uniform float materialSpecular; // Specular Term
uniform float materialExponent; // Specular Exponent

uniform vec3 lightColor;
uniform vec3 lightAttenuation; // x: Constant  y: Linear  z: Quadratic


// Inputs
in vec4 v_color;		 // vertex color: also diffuse color

in vec3 normal;          // Transformed normal in View Space
in vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
//in vec4 lightVector;     // Vector from the vertex to the Light in View Space
						 // Length of lightVector is the distance between light and vertex
						 // if w = 1: Point light, if w = 0: directional light

in vec4 lightVectorArray[3];

// Ouput data
out vec4 color;

vec3 calcColor(vec4 lightDirection) {
	
	float lightPower = 50;
    
	// Implment Phong Shading based on the parameters above
	// Remember that directional light don't have attenuation
	
    float costheta =
        clamp(
            dot(
                normal,
                normalize(lightDirection.xyz)
            )
            , 0, 1
        );
    
    
    
    // Eye vector (towards the camera)
    vec3 eye_normal = normalize(eyeVector);
    
    // Direction in which the triangle reflects the light
    vec3 reflected = normalize(reflect(-lightDirection.xyz, normal));
    // Cosine of the angle between the Eye vector and the Reflect vector,
    // clamped to 0
    //  - Looking into the reflection -> 1
    //  - Looking elsewhere -> < 1
    float cosalpha = clamp( dot( eye_normal, reflected ), 0,1 );
    
    float distance    = length(lightDirection.xyz);
    float attenuation = lightPower / dot(lightAttenuation, vec3(1, distance, distance * distance));
    
    vec3 ambient  = materialAmbient                * v_color.xyz;
    vec3 diffuse  = materialDiffuse  * attenuation * costheta * lightColor * v_color.xyz;
    vec3 specular = materialSpecular * attenuation * pow(cosalpha, materialExponent) * lightColor;

	return  ambient + diffuse + specular;
}

void main()
{
	vec3 finalColor = vec3(0.f,0.f,0.f);
	for (int i = 0; i < 3; i++) {
			finalColor += calcColor(lightVectorArray[i]);
	}
	color =vec4(finalColor, 1);
}
