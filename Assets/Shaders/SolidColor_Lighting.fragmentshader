#version 330 core


// Light and Material Uniform Variables
uniform float materialAmbient; // Ambient Term
uniform float materialDiffuse; // Diffuse Term
uniform float materialSpecular; // Specular Term
uniform float materialExponent; // Specular Exponent

uniform vec3 lightColor1;
uniform float lightPower1;
uniform int WorldLightType1; 

uniform vec3 lightColor2;
uniform float lightPower2;
uniform int WorldLightType2;

uniform vec3 lightColor3;
uniform float lightPower3;
uniform int WorldLightType3;

uniform vec3 lightColor4;
uniform float lightPower4;
uniform int WorldLightType4;

uniform vec3 lightAttenuation; // x: Constant  y: Linear  z: Quadratic

// Inputs
in vec4 v_color;		 // vertex color: also diffuse color

in vec3 normal;          // Transformed normal in View Space
in vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
  
						 // Length of lightVector is the distance between light and vertex
#define NUM_LIGHTS 4
in vec4 lightVectors[NUM_LIGHTS]; // Vector from the vertex to the Light in View Space

// Ouput data
out vec4 color;

vec3 calcColor(vec4 lightDirection,vec3 lightColor, float lightPower, int lightType) {
	
	if (lightPower == 0) {
		return vec3(0.0f);
	}

	// Implment Phong Shading based on the parameters above
	// Remember that directional light don't have attenuation
	float attenuation;
	vec3 surfaceToLight;
	float costheta =clamp(dot(normal, normalize(lightDirection.xyz)), 0, 1);

	 // Eye vector (towards the camera)
    vec3 eye_normal = normalize(eyeVector);
    
    // Direction in which the triangle reflects the light
    vec3 reflected = normalize(reflect(-lightDirection.xyz, normal));
    // Cosine of the angle between the Eye vector and the Reflect vector,
    // clamped to 0
    //  - Looking into the reflection -> 1
    //  - Looking elsewhere -> < 1
    float cosalpha = clamp( dot( eye_normal, reflected ), 0, 1);

	if (lightDirection.w == 0.0) {
		attenuation = 1.0;
	} else {
		float distance = length(lightDirection.xyz);
		attenuation = lightPower / dot(lightAttenuation, vec3(1, distance, distance * distance));
	}

	vec3 ambient  = materialAmbient  * v_color.xyz;
	vec3 diffuse  = materialDiffuse  * attenuation * costheta * lightColor * v_color.xyz;
	vec3 specular = materialSpecular * attenuation * pow(cosalpha, materialExponent) * lightColor;

	if (lightType == 1) {
	// If CONE
	// Not entirely functional, couldn't fix it
		const float cos_outer_cone_angle = 1.0; 

		vec3 L = normalize(lightDirection.xyz);
		vec3 D = normalize(vec3(0.0f, -1.0f, 0.0f));

		float cos_cur_angle = dot(-L, D);

		//float cos_inner_cone_angle = gl_LightSource[0].spotCosCutoff;
		float cos_inner_cone_angle = 0.6;

		float cos_inner_minus_outer_angle = cos_inner_cone_angle - cos_outer_cone_angle;

		float spot = 0.0;
		spot = clamp((cos_cur_angle - cos_outer_cone_angle) / 
				cos_inner_minus_outer_angle, 0.0, 1.0);
					   
		return  ambient + diffuse * spot + specular* spot;
	} else {
		return  ambient + diffuse + specular;
	}
}

void main()
{	
	vec3 lightColors[NUM_LIGHTS] = vec3[](lightColor1, lightColor2, lightColor3, lightColor4);
	float lightPowers[NUM_LIGHTS] = float[](lightPower1, lightPower2, lightPower3, lightPower4);
	int lightTypes[NUM_LIGHTS] = int[](WorldLightType1, WorldLightType2, WorldLightType3, WorldLightType4);

	vec3 finalColor = vec3(0.f,0.f,0.f);
	for (int i = 0; i < NUM_LIGHTS; i++) {
			finalColor += calcColor(lightVectors[i], lightColors[i], lightPowers[i], lightTypes[i]);
	}
	color =vec4(finalColor, 1);
}
