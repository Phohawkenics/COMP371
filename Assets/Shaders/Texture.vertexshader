#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;  // You will need this when you do lighting
layout(location = 2) in vec4 vertexColor;
layout(location = 3) in vec2 vertexUV;


// Uniform Inputs
uniform mat4 WorldTransform;
uniform mat4 ViewTransform;
uniform mat4 ProjectionTransform;

// light position
uniform vec4 WorldLightPosition; // if w = 1: Point light, if w = 0: directional light


// Outputs to fragment shader
out vec3 normal;          // Transformed normal in View Space
out vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
out vec4 lightVector;     // Vector from the vertex to the Light in View Space
out vec4 v_color;
out vec2 UV;

void main()
{
	mat4 MV = ViewTransform * WorldTransform;
	mat4 MVP = ProjectionTransform * MV;

	// Output position of the vertex, in clip space : MVP * position
    gl_Position =  MVP * vec4(vertexPosition_modelspace, 1.0f);

    v_color = vertexColor;
	UV = vertexUV;
    
    // Normal in view space
    normal = normalize(
                (
                    MV
                     * vec4(vertexNormal_modelspace, 0)
                ).xyz
            )
            ;
	
    // Vector from the vertex to the camera.
    //   - camera is the origin in view space
    //   - 
	eyeVector = 
                // camera position
                vec3(0,0,0)
                -
                // vertex position
                (
                    MV *
                    vec4(
                        vertexPosition_modelspace, 1
                    )
                ).xyz;
	
    
    
    lightVector = (ViewTransform * WorldLightPosition) + vec4(eyeVector, 1);
}

