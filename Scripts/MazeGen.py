# Random Maze Generator using Depth-first Search
# http://en.wikipedia.org/wiki/Maze_generation_algorithm
# FB - 20121214
import random
mx = 15; my = 15 # width and height of the maze
maze = [[0 for x in range(mx)] for y in range(my)]
dx = [0, 1, 0, -1]; dy = [-1, 0, 1, 0] # 4 directions to move in the maze
color = [(0,0, 0), (255, 255, 255)] # RGB colors of the maze
# start the maze from a random cell
stack = [(random.randint(0, mx - 1), random.randint(0, my - 1))]

while len(stack) > 0:
    (cx, cy) = stack[-1]
    maze[cy][cx] = 1
    # find a new cell to add
    nlst = [] # list of available neighbors
    for i in range(4):
        nx = cx + dx[i]; ny = cy + dy[i]
        if nx >= 0 and nx < mx and ny >= 0 and ny < my:
            if maze[ny][nx] == 0:
                # of occupied neighbors must be 1
                ctr = 0
                for j in range(4):
                    ex = nx + dx[j]; ey = ny + dy[j]
                    if ex >= 0 and ex < mx and ey >= 0 and ey < my:
                        if maze[ey][ex] == 1: ctr += 1
                if ctr == 1: nlst.append(i)
    # if 1 or more neighbors available then randomly select one and move
    if len(nlst) > 0:
        ir = nlst[random.randint(0, len(nlst) - 1)]
        cx += dx[ir]; cy += dy[ir]
        stack.append((cx, cy))
    else: stack.pop()

def printmaze(showx, showy):
    out = "\n"
    for y in range(my):
        s = "# "
        for x in range(mx):
            if(x == showx and y == showy):
                s += "O"
            else:
                s += (" " if maze[y][x] == 1 else "X")
        out += s + "\n"
    return out
    
with open('../Assets/generated-maze.scene', 'w') as out:
    out.write("# THIS IS AN AUTOGENERATED FILE")
    
    out.write("""
[Cube]
name = floor
physics = static
scaling = 200 1 200
position = 0 -0.5 0
    """)
    
    for z in range(my):
        for x in range(mx):
            if maze[z][x] == 0:
                out.write(printmaze(x, z))
                out.write("""
[Cube]
position = %d 1 %d
physics = static
breakable = %s
scaling = 2.2 2 2.2
                """ % ( 4 + z*2, 4 + x*2, "true" if random.randint(0,5) == 1 else "false" ))

print printmaze(-1,-1)